

===================保存用户业务逻辑=================
用户业务
UserService

  void save(User user)

  void delete(Integer id);

  User queryById(Integer id);

  ....


UserServiceImpl implement UserService

  void save(User user){
  	sout("=============");//业务功能-1
  	sout("*************");//业务功能-2
  	...
  	userDao.save(user);
  }

  void delete(Integer id){
	sout("=============");//业务功能-1
	sout("*************");//业务功能-2
	......
  	userDao.delete(id);
  }

   User queryById(Integer id){
   	sout("=============");//业务功能-1
   	sout("*************");//业务功能-2
   	.....
   	return userDao.queryById(id)
   }


=================保存用户业务逻辑==================
加入新的功能:
	保存用户之前: 打印输出一句话  "==========="

================用户业务逻辑======================

加入新的功能:
	保存|删除|修改|查询用户之前: 打印输出一句话  "==========="
	保存|删除|修改|查询用户之前: 打印输出一句话  "***********"
================================================
问题:
	1.现有业务层开发存在问题
		a.-->额外功能代码存在大量冗余?
		b.-->每个方法都需要书写一遍额外功能代码不利于后续项目维护?

Spring 框架
	AOP: Aspect(切面) Oriented(面向) Programmaing  面向切面编程

	Aspect (切面) = Advice(通知) + 切入点(Pointcut)

	Advice 通知: 业务逻辑中一些附加操作称之为通知  前置  后置   环绕
	Pointcut 切入点: 配置通知应用于项目中那些业务操作

	Aspect 切面 =  附加操作(Advice) + 切入点(Pointcut)(配置)

	1.类 implement xxAdvice接口

	2.XML进行配置
	<aop:config>
		<aop:pointcut id="pc" expresssion="execution(* 包.类.方法名(方法参数))|within(类级别)|@annotation(注解类型)">
		<aop:advisor advice-ref="通知类" pointcut-ref="pc"/> 
	</aop:config>



SpringBoot框架 现有spring框架 进一步封装
	
	1.无xml配置 一切皆java配置

	AOP: 面向切面编程

	Aspect 切面 =   Advice(通知)  +  切入点

	1.开发附加操作 Advice

	2.配置切入点&组装切面


面向切面编程步骤
	
	1.引入aop切面编程依赖
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

	2.在springboot项目中新建config(配置)包


		@Configuration  //修饰范围: 只能用在类上 作用: 代表这是一个spring的配置类  spring.xml
		@Aspect //修饰范围: 只能用在类上   作用:代表这个类是一个切面类  <aop:config>
		MyAspectConfig(自定义切面类)  	配置类{

			//@Before: 代表这个方法是一个前置附加操作
			//@After : 代表这个方法是一个后置附加操作
				注意: 使用@Before 和 @After注解声明方法上加入一个参数 定义一个参数 JointPoint 连接点
			//@Around: 代表这个方法是一个环绕附加操作
				value属性: 用来书写切入点表达式
				注意: 使用@Around注解 在方法定义时声明一个参数: ProceedingJoinPoint 处理过程中连接点

			@Before("execution(* com.baizhi.service.*.*(..))")
			public void before(){
				sout("===========")
			}

		}



=================================================
springboot中文件上传
	
	1.文件上传
	   文件上传: 用户将本地计算机中文件上传到服务器过程称之为文件上传

	2.文件上传开发思路:

		a.提供一张上传页面   提交方式必须:post   enctype属性必须为 multipart/form-data

		b.开发上传controller
		








	




